<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cortex â€“ Contributing</title><link>/docs/contributing/</link><description>Recent content in Contributing on Cortex</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/contributing/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Design patterns and Code conventions</title><link>/docs/contributing/design-patterns-and-code-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/contributing/design-patterns-and-code-conventions/</guid><description>
&lt;p&gt;Cortex adopts some design patterns and code conventions that we ask you to follow when contributing to the project. These conventions have been adopted based on the experience gained over the time and aim to enforce good coding practices and keep a consistent UX (ie. config).&lt;/p&gt;
&lt;h2 id=&#34;go-coding-style&#34;&gt;Go coding style&lt;/h2&gt;
&lt;p&gt;Cortex follows the &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;Go Code Review Comments&lt;/a&gt; styleguide and the &lt;a href=&#34;https://peter.bourgon.org/go-in-production/#formatting-and-style&#34;&gt;Formatting and style&lt;/a&gt; section of Peter Bourgon&amp;rsquo;s &lt;a href=&#34;https://peter.bourgon.org/go-in-production/&#34;&gt;Go: Best Practices for Production Environments&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;no-global-variables&#34;&gt;No global variables&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Do not use global variables&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;prometheus-metrics&#34;&gt;Prometheus metrics&lt;/h2&gt;
&lt;p&gt;When registering a metric:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not use a global variable for the metric&lt;/li&gt;
&lt;li&gt;Create and register the metric with &lt;code&gt;promauto.With(reg)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In any internal Cortex component, do not register the metric to the default prometheus registerer, but pick the registerer in input (ie. &lt;code&gt;NewComponent(reg prometheus.Registerer)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testing metrics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When writing using tests, test exported metrics using &lt;code&gt;testutil.GatherAndCompare()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;config-file-and-cli-flags-conventions&#34;&gt;Config file and CLI flags conventions&lt;/h2&gt;
&lt;p&gt;Naming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Config file options should be lowercase with words &lt;code&gt;_&lt;/code&gt; (underscore) separated (ie. &lt;code&gt;memcached_client&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;CLI flags should be lowercase with words &lt;code&gt;-&lt;/code&gt; (dash) separated (ie. &lt;code&gt;memcached-client&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;When adding a new config option, look if a similar one already exists within the &lt;a href=&#34;/docs/configuration/configuration-file/&#34;&gt;config&lt;/a&gt; and keep the same naming (ie. &lt;code&gt;addresses&lt;/code&gt; for a list of network endpoints)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A CLI flag mentioned in the documentation or changelog should be always prefixed with a single &lt;code&gt;-&lt;/code&gt; (dash)&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Docs: How to run the website locally</title><link>/docs/contributing/how-to-run-the-website-locally/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/contributing/how-to-run-the-website-locally/</guid><description>
&lt;p&gt;The Cortex documentation is compiled into a website published at &lt;a href=&#34;https://cortexmetrics.io/&#34;&gt;cortexmetrics.io&lt;/a&gt;. These instructions explain how to run the website locally, in order to have a quick feedback loop while contributing to the documentation or website styling.&lt;/p&gt;
&lt;h2 id=&#34;initial-setup&#34;&gt;Initial setup&lt;/h2&gt;
&lt;p&gt;The following initial setup is required only once:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; &lt;code&gt;v0.59.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; &lt;code&gt;v12&lt;/code&gt; or above (alternatively via &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;&lt;code&gt;nvm&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install required Node modules with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd website &amp;amp;&amp;amp; npm install postcss-cli autoprefixer &amp;amp;&amp;amp; cd -
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;make BUILD_IN_CONTAINER=false web-build&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;run-it&#34;&gt;Run it&lt;/h2&gt;
&lt;p&gt;Once the initial setup is completed, you can run the website with the following command. The local website will run at &lt;a href=&#34;http://localhost:1313/&#34;&gt;&lt;code&gt;http://localhost:1313/&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Keep this running&lt;/span&gt;
make web-serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whenever you change the content of &lt;code&gt;docs/&lt;/code&gt; or markdown files in the repository root &lt;code&gt;/&lt;/code&gt; you should run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make &lt;span style=&#34;color:#000&#34;&gt;BUILD_IN_CONTAINER&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;false&lt;/span&gt; web-pre&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whenever you change the config file or CLI flags in the Cortex code, you should rebuild the config file reference documentation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make &lt;span style=&#34;color:#000&#34;&gt;BUILD_IN_CONTAINER&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;false&lt;/span&gt; doc web-pre&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Docs: How to upgrade Golang version</title><link>/docs/contributing/how-to-upgrade-golang-version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/contributing/how-to-upgrade-golang-version/</guid><description>
&lt;p&gt;To upgrade the Golang version:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Upgrade build image version
&lt;ul&gt;
&lt;li&gt;Upgrade Golang version in &lt;code&gt;build-image/Dockerfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build new image &lt;code&gt;make build-image/.uptodate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Publish the new image to &lt;code&gt;quay.io&lt;/code&gt; (requires a maintainer)&lt;/li&gt;
&lt;li&gt;Update the Docker image tag in &lt;code&gt;.circleci/config.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Upgrade integration tests version
&lt;ul&gt;
&lt;li&gt;Update the Golang version installed in the &lt;code&gt;integration&lt;/code&gt; job in &lt;code&gt;.circleci/config.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the minimum support Golang version should be upgraded as well:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Upgrade &lt;code&gt;go&lt;/code&gt; version in &lt;code&gt;go.mod&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</description></item></channel></rss>